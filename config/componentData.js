module.exports = /* eslint-disable */ [{"name":"LeapData","description":"Adaptive component for selecting individual features from Leap data","props":{"frame":{"type":{"name":"object"},"required":false,"description":"Leap Motion data frame","defaultValue":{"value":"{}","computed":false}},"selectedData":{"type":{"name":"object"},"required":false,"description":"","defaultValue":{"value":"{\n  hand1: {\n    id: 1,\n    direction: {\n      x: true,\n      y: false,\n      z: false\n    },\n    position: {\n      x: false,\n      y: false,\n      z: false\n    },\n    velocity: {\n      x: false,\n      y: false,\n      z: false\n    },\n    normal: {\n      x: false,\n      y: false,\n      z: false\n    },\n    finger1: {\n      id: 1,\n      hand: 1,\n      direction: {\n        x: true,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger2: {\n      id: 2,\n      hand: 1,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger3: {\n      id: 3,\n      hand: 1,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger4: {\n      id: 4,\n      hand: 1,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger5: {\n      id: 5,\n      hand: 1,\n      direction: {\n        x: false,\n        y: true,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    confidence: 0,\n    grabStrength: 0,\n    pinchStrength: 0,\n    sphereCenter: {\n      x: false,\n      y: false,\n      z: false\n    },\n    sphereRadius: 0\n  },\n  hand2: {\n    id: 2,\n    direction: {\n      x: false,\n      y: false,\n      z: false\n    },\n    position: {\n      x: false,\n      y: false,\n      z: false\n    },\n    velocity: {\n      x: false,\n      y: false,\n      z: false\n    },\n    normal: {\n      x: false,\n      y: false,\n      z: false\n    },\n    finger1: {\n      id: 1,\n      hand: 2,\n      direction: {\n        x: true,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger2: {\n      id: 2,\n      hand: 2,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger3: {\n      id: 3,\n      hand: 2,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger4: {\n      id: 4,\n      hand: 2,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    finger5: {\n      id: 5,\n      hand: 2,\n      direction: {\n        x: false,\n        y: true,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      }\n    },\n    confidence: 0,\n    grabStrength: 0,\n    pinchStrength: 0,\n    sphereCenter: {\n      x: false,\n      y: false,\n      z: false\n    },\n    sphereRadius: 0\n  }\n}","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport {withLeapContainer} from '../LeapProvider/LeapProvider.js'\nimport FeatureSelector from './FeatureSelector.js';\nimport omit from 'lodash.omit';\nimport {\n  Container,\n  Row,\n  Col,\n  Visible,\n  Hidden,\n  ScreenClassRender\n} from 'react-grid-system';\nimport './LeapData.css';\n\nfunction LeapHandData(props) {\n  return (\n    <div className=\"hand\">\n      <div className=\"handLabel\">{props.name + ' ' + props.selectedData.id}</div>\n      <FeatureSelector  label={'Direction'} name={props.selectedData.id + '.0.direction.'} \n                        x={props.d_x} y={props.d_y} z={props.d_z} \n                        selectedData={props.selectedData.direction} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n      <FeatureSelector  label={'Palm Position'} name={props.selectedData.id + '.0.position.'} \n                        x={props.pp_x} y={props.pp_y} z={props.pp_z} \n                        selectedData={props.selectedData.position} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n      <FeatureSelector  label={'Palm Velocity'} name={props.selectedData.id + '.0.velocity.'} \n                        x={props.pv_x} y={props.pv_y} z={props.pv_z} \n                        selectedData={props.selectedData.velocity} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n      <FeatureSelector  label={'Palm Normal'} name={props.selectedData.id + '.0.normal.'} \n                        x={props.pn_x} y={props.pn_y} z={props.pn_z} \n                        selectedData={props.selectedData.normal} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n    </div>\n  );\n}\n\n// const LeapHandDataContainer = connect(state => state)(LeapHandData);\n\nfunction LeapFingerData(props) {\n  return (\n    <div className=\"finger\">\n      <div className=\"fingerLabel\">{props.name}</div>\n      <FeatureSelector  label={'Direction'} \n                        name={props.selectedData.hand + '.' + props.selectedData.id + '.direction.'} \n                        x={props.d_x} y={props.d_y} z={props.d_z} \n                        selectedData={props.selectedData.direction} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n      <FeatureSelector  label={'Tip Position'} \n                        name={props.selectedData.hand + '.' + props.selectedData.id + '.position.'} \n                        x={props.pp_x} y={props.pp_y} z={props.pp_z} \n                        selectedData={props.selectedData.position} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n      <FeatureSelector  label={'Tip Velocity'} \n                        name={props.selectedData.hand + '.' + props.selectedData.id + '.velocity.'} \n                        x={props.pv_x} y={props.pv_y} z={props.pv_z} \n                        selectedData={props.selectedData.velocity} \n                        onSelectedDataChange={props.onSelectedDataChange}/>\n    </div>\n  );\n}\n\n// const LeapFingerDataContainer = connect(state => state)(LeapFingerData);\n\nfunction LeapHand(props) {\n\n  return (\n      <Row>\n        <Col sm={2}>\n          <LeapHandData name=\"Hand\"  \n                                d_x={props.frameData.direction[0]} d_y={props.frameData.direction[1]} d_z={props.frameData.direction[2]}\n                                pp_x={props.frameData.palmPosition[0]} pp_y={props.frameData.palmPosition[1]} pp_z={props.frameData.palmPosition[2]} \n                                pn_x={props.frameData.palmNormal[0]} pn_y={props.frameData.palmNormal[1]} pn_z={props.frameData.palmNormal[2]} \n                                pv_x={props.frameData.palmVelocity[0]} pv_y={props.frameData.palmVelocity[1]} pv_z={props.frameData.palmVelocity[2]} \n                                selectedData={props.selectedData} \n                                onSelectedDataChange={props.onSelectedDataChange}/>\n        </Col>\n        <Col sm={2}>\n          <LeapFingerData name=\"Fingertip 1\" \n                                  d_x={props.frameData.fingers[0].direction[0]} d_y={props.frameData.fingers[0].direction[1]} d_z={props.frameData.fingers[0].direction[2]} \n                                  pp_x={props.frameData.fingers[0].tipPosition[0]} pp_y={props.frameData.fingers[0].tipPosition[1]} pp_z={props.frameData.fingers[0].tipPosition[2]} \n                                  pv_x={props.frameData.fingers[0].tipVelocity[0]} pv_y={props.frameData.fingers[0].tipVelocity[0]} pv_z={props.frameData.fingers[0].tipVelocity[2]} \n                                  selectedData={props.selectedData.finger1} \n                                  onSelectedDataChange={props.onSelectedDataChange}/>\n        </Col>\n        <Col sm={2}>\n          <LeapFingerData name=\"Fingertip 2\" \n                                  d_x={props.frameData.fingers[1].direction[0]} d_y={props.frameData.fingers[1].direction[1]} d_z={props.frameData.fingers[1].direction[2]} \n                                  pp_x={props.frameData.fingers[1].tipPosition[0]} pp_y={props.frameData.fingers[1].tipPosition[1]} pp_z={props.frameData.fingers[1].tipPosition[2]} \n                                  pv_x={props.frameData.fingers[1].tipVelocity[0]} pv_y={props.frameData.fingers[1].tipVelocity[1]} pv_z={props.frameData.fingers[1].tipVelocity[2]} \n                                  selectedData={props.selectedData.finger2} \n                                  onSelectedDataChange={props.onSelectedDataChange}/>\n        </Col>\n        <Col sm={2}>\n          <LeapFingerData name=\"Fingertip 3\" \n                                  d_x={props.frameData.fingers[2].direction[0]} d_y={props.frameData.fingers[2].direction[1]} d_z={props.frameData.fingers[2].direction[2]} \n                                  pp_x={props.frameData.fingers[2].tipPosition[0]} pp_y={props.frameData.fingers[2].tipPosition[1]} pp_z={props.frameData.fingers[2].tipPosition[2]} \n                                  pv_x={props.frameData.fingers[2].tipVelocity[0]} pv_y={props.frameData.fingers[2].tipVelocity[1]} pv_z={props.frameData.fingers[2].tipVelocity[2]} \n                                  selectedData={props.selectedData.finger3} \n                                  onSelectedDataChange={props.onSelectedDataChange}/>\n        </Col>\n        <Col sm={2}>\n          <LeapFingerData name=\"Fingertip 4\" \n                                  d_x={props.frameData.fingers[3].direction[0]} d_y={props.frameData.fingers[3].direction[1]} d_z={props.frameData.fingers[3].direction[2]} \n                                  pp_x={props.frameData.fingers[3].tipPosition[0]} pp_y={props.frameData.fingers[3].tipPosition[1]} pp_z={props.frameData.fingers[3].tipPosition[2]} \n                                  pv_x={props.frameData.fingers[3].tipVelocity[0]} pv_y={props.frameData.fingers[3].tipVelocity[1]} pv_z={props.frameData.fingers[3].tipVelocity[2]} \n                                  selectedData={props.selectedData.finger4} \n                                  onSelectedDataChange={props.onSelectedDataChange}/>\n        </Col>\n        <Col sm={2}>\n          <LeapFingerData name=\"Fingertip 5\" \n                                  d_x={props.frameData.fingers[4].direction[0]} d_y={props.frameData.fingers[4].direction[1]} d_z={props.frameData.fingers[4].direction[2]} \n                                  pp_x={props.frameData.fingers[4].tipPosition[0]} pp_y={props.frameData.fingers[4].tipPosition[1]} pp_z={props.frameData.fingers[4].tipPosition[2]} \n                                  pv_x={props.frameData.fingers[4].tipVelocity[0]} pv_y={props.frameData.fingers[4].tipVelocity[1]} pv_z={props.frameData.fingers[4].tipVelocity[2]} \n                                  selectedData={props.selectedData.finger5} \n                                  onSelectedDataChange={props.onSelectedDataChange}/>\n        </Col>\n      </Row>\n  );\n}\n\n// const LeapHandContainer = connect(state => state)(LeapHand);\n\n\nfunction format( num ){\n    return ( Math.floor(num * 100000)/100000 )  // slice decimal digits after the 2nd one\n    .toFixed(4)  // format with two decimal places\n    .substr(0,6) // get the leading four characters\n    .replace(/\\.$/,''); // remove trailing decimal place separator\n}\n\nfunction CurrentSelectedFrame(props) {\n\n  var listOfSelectedFrameValues = [];\n\n  if (props.frameData.hands && props.frameData.hands.length) {\n\n    if (props.frameData.hands.length >= 1) {\n      if (props.selectedData.hand1.direction.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].direction[0]);\n      if (props.selectedData.hand1.direction.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].direction[1]);\n      if (props.selectedData.hand1.direction.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].direction[2]);\n\n      if (props.selectedData.hand1.position.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmPosition[0]);\n      if (props.selectedData.hand1.position.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmPosition[1]);\n      if (props.selectedData.hand1.position.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmPosition[2]);\n\n      if (props.selectedData.hand1.velocity.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmVelocity[0]);\n      if (props.selectedData.hand1.velocity.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmVelocity[1]);\n      if (props.selectedData.hand1.velocity.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmVelocity[2]);\n\n      if (props.selectedData.hand1.normal.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmNormal[0]);\n      if (props.selectedData.hand1.normal.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmNormal[1]);\n      if (props.selectedData.hand1.normal.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].palmNormal[2]);\n\n      if (props.selectedData.hand1.finger1.direction.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].direction[0]);\n      if (props.selectedData.hand1.finger1.direction.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].direction[1]);\n      if (props.selectedData.hand1.finger1.direction.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].direction[2]);\n\n      if (props.selectedData.hand1.finger1.position.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].tipPosition[0]);\n      if (props.selectedData.hand1.finger1.position.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].tipPosition[1]);\n      if (props.selectedData.hand1.finger1.position.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].tipPosition[2]);\n\n      if (props.selectedData.hand1.finger1.velocity.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].tipVelocity[0]);\n      if (props.selectedData.hand1.finger1.velocity.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].tipVelocity[1]);\n      if (props.selectedData.hand1.finger1.velocity.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[0].tipVelocity[2]);\n\n      if (props.selectedData.hand1.finger2.direction.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].direction[0]);\n      if (props.selectedData.hand1.finger2.direction.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].direction[1]);\n      if (props.selectedData.hand1.finger2.direction.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].direction[2]);\n\n      if (props.selectedData.hand1.finger2.position.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].tipPosition[0]);\n      if (props.selectedData.hand1.finger2.position.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].tipPosition[1]);\n      if (props.selectedData.hand1.finger2.position.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].tipPosition[2]);\n\n      if (props.selectedData.hand1.finger2.velocity.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].tipVelocity[0]);\n      if (props.selectedData.hand1.finger2.velocity.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].tipVelocity[1]);\n      if (props.selectedData.hand1.finger2.velocity.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[1].tipVelocity[2]);\n\n      if (props.selectedData.hand1.finger3.direction.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].direction[0]);\n      if (props.selectedData.hand1.finger3.direction.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].direction[1]);\n      if (props.selectedData.hand1.finger3.direction.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].direction[2]);\n\n      if (props.selectedData.hand1.finger3.position.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].tipPosition[0]);\n      if (props.selectedData.hand1.finger3.position.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].tipPosition[1]);\n      if (props.selectedData.hand1.finger3.position.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].tipPosition[2]);\n\n      if (props.selectedData.hand1.finger3.velocity.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].tipVelocity[0]);\n      if (props.selectedData.hand1.finger3.velocity.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].tipVelocity[1]);\n      if (props.selectedData.hand1.finger3.velocity.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[2].tipVelocity[2]);\n\n      if (props.selectedData.hand1.finger4.direction.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].direction[0]);\n      if (props.selectedData.hand1.finger4.direction.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].direction[1]);\n      if (props.selectedData.hand1.finger4.direction.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].direction[2]);\n\n      if (props.selectedData.hand1.finger4.position.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].tipPosition[0]);\n      if (props.selectedData.hand1.finger4.position.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].tipPosition[1]);\n      if (props.selectedData.hand1.finger4.position.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].tipPosition[2]);\n\n      if (props.selectedData.hand1.finger4.velocity.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].tipVelocity[0]);\n      if (props.selectedData.hand1.finger4.velocity.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].tipVelocity[1]);\n      if (props.selectedData.hand1.finger4.velocity.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[3].tipVelocity[2]);\n\n      if (props.selectedData.hand1.finger5.direction.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].direction[0]);\n      if (props.selectedData.hand1.finger5.direction.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].direction[1]);\n      if (props.selectedData.hand1.finger5.direction.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].direction[2]);\n\n      if (props.selectedData.hand1.finger5.position.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].tipPosition[0]);\n      if (props.selectedData.hand1.finger5.position.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].tipPosition[1]);\n      if (props.selectedData.hand1.finger5.position.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].tipPosition[2]);\n\n      if (props.selectedData.hand1.finger5.velocity.x)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].tipVelocity[0]);\n      if (props.selectedData.hand1.finger5.velocity.y)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].tipVelocity[1]);\n      if (props.selectedData.hand1.finger5.velocity.z)\n        listOfSelectedFrameValues.push(props.frameData.hands[0].fingers[4].tipVelocity[2]);\n\n      if (props.frameData.hands.length === 2) {\n\n        if (props.selectedData.hand2.direction.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].direction[0]);\n        if (props.selectedData.hand2.direction.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].direction[1]);\n        if (props.selectedData.hand2.direction.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].direction[2]);\n\n        if (props.selectedData.hand2.position.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmPosition[0]);\n        if (props.selectedData.hand2.position.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmPosition[1]);\n        if (props.selectedData.hand2.position.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmPosition[2]);\n\n        if (props.selectedData.hand2.velocity.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmVelocity[0]);\n        if (props.selectedData.hand2.velocity.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmVelocity[1]);\n        if (props.selectedData.hand2.velocity.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmVelocity[2]);\n\n        if (props.selectedData.hand2.normal.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmNormal[0]);\n        if (props.selectedData.hand2.normal.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmNormal[1]);\n        if (props.selectedData.hand2.normal.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].palmNormal[2]);\n\n        if (props.selectedData.hand2.finger1.direction.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].direction[0]);\n        if (props.selectedData.hand2.finger1.direction.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].direction[1]);\n        if (props.selectedData.hand2.finger1.direction.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].direction[2]);\n\n        if (props.selectedData.hand2.finger1.position.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].tipPosition[0]);\n        if (props.selectedData.hand2.finger1.position.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].tipPosition[1]);\n        if (props.selectedData.hand2.finger1.position.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].tipPosition[2]);\n\n        if (props.selectedData.hand2.finger1.velocity.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].tipVelocity[0]);\n        if (props.selectedData.hand2.finger1.velocity.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].tipVelocity[1]);\n        if (props.selectedData.hand2.finger1.velocity.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[0].tipVelocity[2]);\n\n        // }\n\n        // if (props.frameData.hands[1].fingers && props.frameData.hands[1].fingers.length && props.frameData.hands[1].fingers[1].direction) {\n\n        if (props.selectedData.hand2.finger2.direction.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].direction[0]);\n        if (props.selectedData.hand2.finger2.direction.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].direction[1]);\n        if (props.selectedData.hand2.finger2.direction.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].direction[2]);\n\n        if (props.selectedData.hand2.finger2.position.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].tipPosition[0]);\n        if (props.selectedData.hand2.finger2.position.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].tipPosition[1]);\n        if (props.selectedData.hand2.finger2.position.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].tipPosition[2]);\n\n        if (props.selectedData.hand2.finger2.velocity.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].tipVelocity[0]);\n        if (props.selectedData.hand2.finger2.velocity.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].tipVelocity[1]);\n        if (props.selectedData.hand2.finger2.velocity.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[1].tipVelocity[2]);\n\n        if (props.selectedData.hand2.finger3.direction.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].direction[0]);\n        if (props.selectedData.hand2.finger3.direction.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].direction[1]);\n        if (props.selectedData.hand2.finger3.direction.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].direction[2]);\n\n        if (props.selectedData.hand2.finger3.position.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].tipPosition[0]);\n        if (props.selectedData.hand2.finger3.position.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].tipPosition[1]);\n        if (props.selectedData.hand2.finger3.position.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].tipPosition[2]);\n\n        if (props.selectedData.hand2.finger3.velocity.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].tipVelocity[0]);\n        if (props.selectedData.hand2.finger3.velocity.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].tipVelocity[1]);\n        if (props.selectedData.hand2.finger3.velocity.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[2].tipVelocity[2]);\n\n        if (props.selectedData.hand2.finger4.direction.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].direction[0]);\n        if (props.selectedData.hand2.finger4.direction.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].direction[1]);\n        if (props.selectedData.hand2.finger4.direction.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].direction[2]);\n\n        if (props.selectedData.hand2.finger4.position.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].tipPosition[0]);\n        if (props.selectedData.hand2.finger4.position.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].tipPosition[1]);\n        if (props.selectedData.hand2.finger4.position.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].tipPosition[2]);\n\n        if (props.selectedData.hand2.finger4.velocity.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].tipVelocity[0]);\n        if (props.selectedData.hand2.finger4.velocity.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].tipVelocity[1]);\n        if (props.selectedData.hand2.finger4.velocity.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[3].tipVelocity[2]);\n\n        if (props.selectedData.hand2.finger5.direction.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].direction[0]);\n        if (props.selectedData.hand2.finger5.direction.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].direction[1]);\n        if (props.selectedData.hand2.finger5.direction.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].direction[2]);\n\n        if (props.selectedData.hand2.finger5.position.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].tipPosition[0]);\n        if (props.selectedData.hand2.finger5.position.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].tipPosition[1]);\n        if (props.selectedData.hand2.finger5.position.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].tipPosition[2]);\n\n        if (props.selectedData.hand2.finger5.velocity.x)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].tipVelocity[0]);\n        if (props.selectedData.hand2.finger5.velocity.y)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].tipVelocity[1]);\n        if (props.selectedData.hand2.finger5.velocity.z)\n          listOfSelectedFrameValues.push(props.frameData.hands[1].fingers[4].tipVelocity[2]);\n\n        }\n      }\n\n  }\n\n  return (\n    <div className='currentFrameContainer'>\n      <div> Current Frame [ </div>\n      <div className='currentFrame'>\n        {listOfSelectedFrameValues.map((feature, i) => { return <span key={i}>{ format(feature)}, </span>} )}\n      </div>\n      <div> ] </div>\n    </div>\n  );\n}\n\n// TODO extract currentFrameRate from here\n\n/** Adaptive component for selecting individual features from Leap data */\nconst LeapData = ({ frame, ...passedProps }) => {\n\n  const props = omit(passedProps, 'children');\n\n  if (frame.hands && frame.hands.length) {\n    if (frame.hands.length === 1) {\n      return (\n        <div>\n          <Container>\n            <Row>\n              <div className='currentFrameRate'>Current framerate: {frame.currentFrameRate}</div>\n            </Row>\n            <LeapHand frameData={frame.hands[0]} selectedData={props.selectedData.hand1} onSelectedDataChange={props.onSelectedDataChange}/>\n            <CurrentSelectedFrame className='currentSelectedFrame' frameData={frame} selectedData={props.selectedData}/>\n          </Container>\n        </div>\n      )\n    }\n    if (frame.hands.length === 2 && frame.hands[0].fingers && frame.hands[0].fingers.length && frame.hands[1].fingers && frame.hands[1].fingers.length) {\n      return (\n        <div>\n          <Container>\n            <Row>\n              <div className='currentFrameRate'>Current framerate: {frame.currentFrameRate}</div>\n            </Row>\n          <LeapHand frameData={frame.hands[0]} selectedData={props.selectedData.hand1} onSelectedDataChange={props.onSelectedDataChange}/>\n          <LeapHand frameData={frame.hands[1]} selectedData={props.selectedData.hand2} onSelectedDataChange={props.onSelectedDataChange}/>\n          <Row>\n            <Col sm={8}>\n              <CurrentSelectedFrame frameData={frame} selectedData={props.selectedData}/>\n            </Col>\n          </Row>\n        </Container>\n        </div>\n      )\n    }\n  } else { \n    return (\n      <div>\n        <Container>\n          <div className='currentFrameRate'>Current framerate: {frame.currentFrameRate}</div>\n        </Container>\n      </div>\n    )\n  }\n}\n\nLeapData.propTypes = {\n  /**  Leap Motion data frame  */\n  frame: PropTypes.object,\n  selectedData: PropTypes.object\n}\n\nLeapData.defaultProps = {\n  /**  Leap Motion data frame  */\n  frame: {},\n  selectedData: {\n    hand1: {\n      id: 1,\n      direction: {\n        x: true,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      },\n      normal: {\n        x: false,\n        y: false,\n        z: false\n      },\n      finger1: {\n        id: 1,\n        hand: 1,\n        direction: {\n          x: true,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger2: {\n        id: 2,\n        hand: 1,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger3: {\n        id: 3,\n        hand: 1,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger4: {\n        id: 4,\n        hand: 1,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger5: {\n        id: 5,\n        hand: 1,\n        direction: {\n          x: false,\n          y: true,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      confidence: 0,\n      grabStrength: 0,\n      pinchStrength: 0,\n      sphereCenter: {\n        x: false,\n        y: false,\n        z: false\n      },\n      sphereRadius: 0\n    },\n    hand2: {\n      id: 2,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      },\n      normal: {\n        x: false,\n        y: false,\n        z: false\n      },\n      finger1: {\n        id: 1,\n        hand: 2,\n        direction: {\n          x: true,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger2: {\n        id: 2,\n        hand: 2,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger3: {\n        id: 3,\n        hand: 2,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger4: {\n        id: 4,\n        hand: 2,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger5: {\n        id: 5,\n        hand: 2,\n        direction: {\n          x: false,\n          y: true,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      confidence: 0,\n      grabStrength: 0,\n      pinchStrength: 0,\n      sphereCenter: {\n        x: false,\n        y: false,\n        z: false\n      },\n      sphereRadius: 0\n    }\n  }\n}\n\n// export default withLeapContainer(connect(state => state)(LeapData));\nexport default withLeapContainer(LeapData);\n","examples":[{"name":"ExampleLeapData","description":"","code":"import React from 'react';\nimport LeapData  from 'react-leap-three/LeapData';\nimport LeapProvider from 'react-leap-three/LeapProvider';\nimport update from 'immutability-helper';\n\n\nexport default function ExampleLeapData(){\n  \n  const state = {\n    hand1: {\n      id: 1,\n      direction: {\n        x: true,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      },\n      normal: {\n        x: false,\n        y: false,\n        z: false\n      },\n      finger1: {\n        id: 1,\n        hand: 1,\n        direction: {\n          x: true,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger2: {\n        id: 2,\n        hand: 1,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger3: {\n        id: 3,\n        hand: 1,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger4: {\n        id: 4,\n        hand: 1,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger5: {\n        id: 5,\n        hand: 1,\n        direction: {\n          x: false,\n          y: true,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      confidence: 0,\n      grabStrength: 0,\n      pinchStrength: 0,\n      sphereCenter: {\n        x: false,\n        y: false,\n        z: false\n      },\n      sphereRadius: 0\n    },\n    hand2: {\n      id: 2,\n      direction: {\n        x: false,\n        y: false,\n        z: false\n      },\n      position: {\n        x: false,\n        y: false,\n        z: false\n      },\n      velocity: {\n        x: false,\n        y: false,\n        z: false\n      },\n      normal: {\n        x: false,\n        y: false,\n        z: false\n      },\n      finger1: {\n        id: 1,\n        hand: 2,\n        direction: {\n          x: true,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger2: {\n        id: 2,\n        hand: 2,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger3: {\n        id: 3,\n        hand: 2,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger4: {\n        id: 4,\n        hand: 2,\n        direction: {\n          x: false,\n          y: false,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      finger5: {\n        id: 5,\n        hand: 2,\n        direction: {\n          x: false,\n          y: true,\n          z: false\n        },\n        position: {\n          x: false,\n          y: false,\n          z: false\n        },\n        velocity: {\n          x: false,\n          y: false,\n          z: false\n        }\n      },\n      confidence: 0,\n      grabStrength: 0,\n      pinchStrength: 0,\n      sphereCenter: {\n        x: false,\n        y: false,\n        z: false\n      },\n      sphereRadius: 0\n    }\n  }\n    \n  /** Make deep copy of current state and update it using immutability-helper */\n  function handleSelectedDataChange(name) {\n\n    var newCollection = {};\n    var propValuePair= name.split(':');\n    let cs = propValuePair[0].split('.');\n\n    if (cs[1] === '0') {\n      newCollection = update(state, {\n        ['hand' + cs[0]]: {\n          [cs[2]]: {\n            [cs[3]]: {\n              $set: !state['hand' + cs[0]][cs[2]][cs[3]]\n            }\n          }\n        }\n      });\n    }\n    else {\n      newCollection = update(state, {\n        ['hand' + cs[0]]: {\n          ['finger' + cs[1]]: {\n            [cs[2]]: {\n              [cs[3]]: {\n                $set: !state['hand' + cs[0]]['finger' + cs[1]][cs[2]][cs[3]]\n              }\n            }\n          }\n        }\n      });\n    }\n    return newCollection;\n  }\n\n  return (\n    <LeapProvider>\n      <LeapData selectedData={state} onSelectedDataChange={handleSelectedDataChange} />\n    </LeapProvider>\n  )\n}"}]},{"name":"LeapProvider","description":"High-Order Component (HOC) that wraps and injects children component with a frame of Leap Motion data","props":{"options":{"type":{"name":"object"},"required":false,"description":"Leap controller configuration options","defaultValue":{"value":"{\n  host: '127.0.0.1',\n  port: 6437,\n  enableGestures: false,\n  background: false,\n  optimizeHMD: false,\n  frameEventName: 'animationFrame',\n  useAllPlugins: false\n}","computed":false}}},"code":"import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Leap from 'leapjs';\nimport omit from 'lodash.omit';\n\n/** High-Order Component (HOC) that wraps and injects children component with a frame of Leap Motion data */\nexport default class LeapProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      frame: {}\n    }\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.onFrame = this.onFrame.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      leapContextFrame: this.state.frame,\n    }\n  }\n\n  componentDidMount() {\n\n    const { options } = this.props;\n\n    this.setupLeap(options);\n\n    this.leapController.connect();\n\n    console.log('LeapProvider - componentDidMount');\n  }\n\n\n  componentWillUnmount() {\n\n    // this.stop();\n\n    // TODO We need to kill the event handler that sets the frame to state.\n\n    // TODO Should we remove child components too?\n    // this.mount.removeChild(this.renderer.domElement);\n    // this.leapController.on('frame', null);\n    this.leapController.disconnect();\n  }\n\n  setupLeap(options){\n    this.leapController = new Leap.Controller(options);\n    // .use('handHold')\n    // .use('transform', { position: new THREE.Vector3(1, 0, 0)})\n    // .use('handEntry')\n    // .use('screenPosition')\n    // .use('boneHand', {\n      // parent: scene,\n      // renderer: renderer,\n      // scale: getParam('scale'),\n      // positionScale: getParam('positionScale'),\n      // offset: new THREE.Vector3(0, 0, 0),\n      // renderFn: function() {\n        // renderer.render(scene, camera);\n        // return controls.update();\n      // },\n      // materialOptions: {\n      //   wireframe: getParam('wireframe')\n      // },\n      // dotsMode: getParam('dots'),\n      // stats: stats,\n      // camera: camera,\n      // boneLabels: function(boneMesh, leapHand) {\n      //   if (boneMesh.name.indexOf('Finger_03') === 0) {\n      //     return leapHand.pinchStrength;\n      //   }\n      // },\n      // boneColors: function(boneMesh, leapHand) {\n      //   if ((boneMesh.name.indexOf('Finger_0') === 0) || (boneMesh.name.indexOf('Finger_1') === 0)) {\n      //     return {\n      //       hue: 0.6,\n      //       saturation: leapHand.pinchStrength\n      //     };\n      //   }\n      // },\n      // checkWebGL: true\n    // });\n\n    this.leapController.on('deviceAttached', function() {\n      console.log('LeapProvider - deviceAttached');\n    });\n    this.leapController.on('deviceStreaming', function() {\n      console.log('LeapProvider - deviceStreaming');\n    });\n    this.leapController.on('deviceStopped', function() {\n      console.log('LeapProvider - deviceStopped');\n    });\n    this.leapController.on('deviceRemoved', function() {\n      console.log('LeapProvider - deviceRemoved');\n    });\n\n    this.leapController.on('deviceRemoved', function() {\n      console.log('LeapProvider - deviceRemoved');\n    });\n\n    this.leapController.on('frame', this.onFrame);\n  }\n\n  onFrame(frame){\n   this.setState({ frame });\n  }\n\n\n\n  start() {\n    // console.log('start');\n    if (!this.frameId) {\n      this.frameId = window.requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop() {\n    console.log('stop');\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate(){\n    // console.log('animate');\n\n    this.setState({\n      frame: this.leapController.frame()\n    });\n\n    // this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  render() {\n    // console.log(this.props);\n    const { children } = this.props\n    return <div>{children}</div>\n  }\n}\n\nLeapProvider.propTypes = {\n    /** Leap controller configuration options */\n    options: PropTypes.object\n}\n\nLeapProvider.defaultProps = {\n  /** Default Leap controller configuration options */\n  options: {\n    host: '127.0.0.1',\n    port: 6437,\n    enableGestures: false,\n    background: false,\n    optimizeHMD: false,\n    frameEventName: 'animationFrame',\n    useAllPlugins: false\n  }\n}\n\nLeapProvider.childContextTypes = {\n  /** Type of Leap frame passed to children as context  */\n  leapContextFrame: PropTypes.object\n}\n\n/**\n * HOC wraps children components [LeapData]\n * to inject Leap frame and pass throu children props\n */\nexport function withLeapContainer(WrappedComponent) {\n  const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component'\n\n  const LeapContainer = (props, context) => {\n    const frame = context.leapContextFrame\n    const passedProps = omit(props, ['children', 'frame'])\n\n    return (\n      <WrappedComponent frame={frame} {...passedProps}>\n        {props.children}\n      </WrappedComponent>\n    )\n  } \n\n  LeapContainer.displayName = `LeapContainer(${wrappedComponentName})`\n\n  LeapContainer.contextTypes = {\n    leapContextFrame: PropTypes.object\n  }\n\n  return LeapContainer\n}\n","examples":[]},{"name":"LeapViz","description":"Renders a simple THREE scene geometry from Leapmotion frame data","props":{"frame":{"type":{"name":"object"},"required":false,"description":"Leap Motion data frame"}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as THREE from 'three';\n// import Leap from 'leapjs';\nimport {withLeapContainer} from '../LeapProvider/LeapProvider.js'\n// import HandMesh from 'leapjs-plugins';\n\n/** Renders a simple THREE scene geometry from Leapmotion frame data */\nclass LeapViz extends Component {\n  constructor(props) {\n    super(props)\n\n    console.log('leapviz props');\n    console.log(props);\n\n    this.state = {\n      frame: this.props.frame,\n      hand1position: new THREE.Vector3(0,0,0),\n      hand1rotation: new THREE.Vector3(0,0,0),\n\n      pinky1position: new THREE.Vector3(0,0,0),\n      ring1position: new THREE.Vector3(0,0,0),\n      birdie1position: new THREE.Vector3(0,0,0),\n      index1position: new THREE.Vector3(0,0,0),\n      thumb1position: new THREE.Vector3(0,0,0),\n\n      hand2position: new THREE.Vector3(0,0,0),\n      hand2rotation: new THREE.Vector3(0,0,0),\n\n      pinky2position: new THREE.Vector3(0,0,0),\n      pinky2carpPosition: new THREE.Vector3(0,0,0),\n      pinky2dipPosition: new THREE.Vector3(0,0,0),\n      pinky2mcpPosition: new THREE.Vector3(0,0,0),\n      pinky2pipPosition: new THREE.Vector3(0,0,0),\n\n      ring2position: new THREE.Vector3(0,0,0),\n      ring2carpPosition:new THREE.Vector3(0,0,0),\n      ring2dipPosition: new THREE.Vector3(0,0,0),\n      ring2mcpPosition: new THREE.Vector3(0,0,0),\n      ring2pipPosition: new THREE.Vector3(0,0,0),\n\n      birdie2position: new THREE.Vector3(0,0,0),\n      birdie2carpPosition: new THREE.Vector3(0,0,0),\n      birdie2dipPosition: new THREE.Vector3(0,0,0),\n      birdie2mcpPosition: new THREE.Vector3(0,0,0),\n      birdie2pipPosition: new THREE.Vector3(0,0,0),\n\n      index2position: new THREE.Vector3(0,0,0),\n      index2carpPosition: new THREE.Vector3(0,0,0),\n      index2dipPosition: new THREE.Vector3(0,0,0),\n      index2mcpPosition: new THREE.Vector3(0,0,0),\n      index2pipPosition: new THREE.Vector3(0,0,0),\n\n      thumb2position: new THREE.Vector3(0,0,0),\n      thumb2carpPosition: new THREE.Vector3(0,0,0),\n      thumb2dipPosition: new THREE.Vector3(0,0,0),\n      thumb2mcpPosition: new THREE.Vector3(0,0,0),\n      thumb2pipPosition: new THREE.Vector3(0,0,0),\n\n      cubeRotation: new THREE.Euler(),\n      sphereRotation: new THREE.Euler(),\n      torusRotation: new THREE.Euler(),\n      cubePosition: new THREE.Vector3(0,0,0),\n      spherePosition: new THREE.Vector3(0,0,0),\n      torusPosition: new THREE.Vector3(0,0,0),\n      armMeshes: [],\n      boneMeshes: []\n    };\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n    this.animateHands = this.animateHands.bind(this);\n  }\n\n  componentDidMount() {\n\n    this.setupScene();\n\n    this.setupLeap();\n\n    this.start();\n  }\n\n  componentWillUnmount() {\n\n    this.stop()\n\n    this.mount.removeChild(this.renderer.domElement)\n    // this.leapController.disconnect();\n  }\n\n  setupScene(){\n\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    const b_geometry = new THREE.BoxGeometry(2, 1, 2);\n    const b_material = new THREE.MeshBasicMaterial({ color: '#FF0000' });\n    const cube = new THREE.Mesh(b_geometry, b_material);\n\n    const s_geometry = new THREE.SphereGeometry(1, 50, 40);\n    const s_material = new THREE.MeshBasicMaterial({ color: '#00FF00' });\n\n    var nFingerList = Array.from({length: 10}, (v, k) => k+1);\n\n    this.spheres = nFingerList.map(i => new THREE.Mesh(s_geometry, s_material));\n\n    const ss_geometry = new THREE.SphereGeometry(1, 50, 40);\n    const ss_material = new THREE.MeshBasicMaterial({ color: '#FF0000' });\n    var nFingerBoneList = Array.from({length: 8}, (v, k) => k+1);\n    this.spheres_small = nFingerBoneList.map(i => new THREE.Mesh(ss_geometry, ss_material));\n\n    const t_geometry = new THREE.SphereGeometry(2, 40, 40);\n    const t_material = new THREE.MeshBasicMaterial({ color: '#00FF00' });\n    const bigSphere1 = new THREE.Mesh(t_geometry, t_material);\n    const bigSphere2 = new THREE.Mesh(t_geometry, t_material);\n\n    camera.position.z = 50;\n    scene.add(cube);\n    this.spheres.map(i => scene.add(i));\n\n    this.spheres_small.map(i => scene.add(i));\n    scene.add(bigSphere1);\n    scene.add(bigSphere2);\n\n    renderer.setClearColor('#000000');\n    renderer.setSize(width, height);\n\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.material = b_material;\n    this.cube = cube;\n    this.bigSphere1 = bigSphere1;\n    this.bigSphere2 = bigSphere2;\n\n    this.mount.appendChild(this.renderer.domElement)\n  }\n\n  setupLeap(){\n\n    // TODO pass options with object\n    // this.leapController = new Leap.Controller({\n    //   host: '127.0.0.1',\n    //   port: 6437,\n    //   enableGestures: false,\n    //   background: false,\n    //   optimizeHMD: false,\n    //   frameEventName: 'animationFrame', // uses the browser animation loop (generally 60 fps). // 'deviceFrame' - Leap Motion controller frame rate (20 to 200 fps\n    //   useAllPlugins: false\n    // });\n    // .use('handHold')\n    // .use('transform', { position: new THREE.Vector3(1, 0, 0)})\n    // .use('handEntry')\n    // .use('screenPosition')\n    // .use('boneHand', {\n      // parent: scene,\n      // renderer: renderer,\n      // scale: getParam('scale'),\n      // positionScale: getParam('positionScale'),\n      // offset: new THREE.Vector3(0, 0, 0),\n      // renderFn: function() {\n        // renderer.render(scene, camera);\n        // return controls.update();\n      // },\n      // materialOptions: {\n      //   wireframe: getParam('wireframe')\n      // },\n      // dotsMode: getParam('dots'),\n      // stats: stats,\n      // camera: camera,\n      // boneLabels: function(boneMesh, leapHand) {\n      //   if (boneMesh.name.indexOf('Finger_03') === 0) {\n      //     return leapHand.pinchStrength;\n      //   }\n      // },\n      // boneColors: function(boneMesh, leapHand) {\n      //   if ((boneMesh.name.indexOf('Finger_0') === 0) || (boneMesh.name.indexOf('Finger_1') === 0)) {\n      //     return {\n      //       hue: 0.6,\n      //       saturation: leapHand.pinchStrength\n      //     };\n      //   }\n      // },\n      // checkWebGL: true\n    // });\n\n    // this.leapController.on('deviceAttached', function() {\n    //   console.log('deviceAttached');\n    // });\n    // this.leapController.on('deviceStreaming', function() {\n    //   console.log('deviceStreaming');\n    // });\n    // this.leapController.on('deviceStopped', function() {\n    //   console.log('deviceStopped');\n    // });\n    // this.leapController.on('deviceRemoved', function() {\n    //   console.log('deviceRemoved');\n    // });\n    //\n    // this.leapController.connect();\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = window.requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate() {\n    // console.log('leapviz - animate');\n    // console.log(this.props.frame);\n\n    this.setState({\n      frame: this.props.frame\n    });\n\n    this.cube.rotation.x += 0.01\n    this.cube.rotation.y += 0.01\n\n    this.bigSphere1.position.x = this.state.hand1position.x/10;\n    this.bigSphere1.position.y = this.state.hand1position.y/10;\n    this.bigSphere1.position.z = this.state.hand1position.z/10;\n\n    this.bigSphere1.rotation.x = -Math.atan2(this.state.hand1rotation.x, this.state.hand1rotation.y) + Math.PI/2;\n    // this.bigSphere1.rotation.y = this.state.hand1rotation.y;\n    this.bigSphere1.rotation.z = this.state.hand1rotation.z + 90;\n\n    this.bigSphere2.position.x = this.state.hand2position.x/10;\n    this.bigSphere2.position.y = this.state.hand2position.y/10;\n    this.bigSphere2.position.z = this.state.hand2position.z/10;\n\n    this.bigSphere2.rotation.x = -this.state.hand2rotation.x + 90;\n    this.bigSphere2.rotation.y =  this.state.hand2rotation.y + 90;\n    // this.bigSphere2.rotation.z =  this.state.hand2rotation.z + 90;\n\n    this.spheres[0].position.x = this.state.pinky1position.x/10;\n    this.spheres[0].position.y = this.state.pinky1position.y/10;\n    this.spheres[0].position.z = this.state.pinky1position.z/10;\n    this.spheres[1].position.x = this.state.ring1position.x/10;\n    this.spheres[1].position.y = this.state.ring1position.y/10;\n    this.spheres[1].position.z = this.state.ring1position.z/10;\n    this.spheres[2].position.x = this.state.birdie1position.x/10;\n    this.spheres[2].position.y = this.state.birdie1position.y/10;\n    this.spheres[2].position.z = this.state.birdie1position.z/10;\n    this.spheres[3].position.x = this.state.index1position.x/10;\n    this.spheres[3].position.y = this.state.index1position.y/10;\n    this.spheres[3].position.z = this.state.index1position.z/10;\n    this.spheres[4].position.x = this.state.thumb1position.x/10;\n    this.spheres[4].position.y = this.state.thumb1position.y/10;\n    this.spheres[4].position.z = this.state.thumb1position.z/10;\n\n    this.spheres[5].position.x = this.state.pinky2position.x/10;\n    this.spheres[5].position.y = this.state.pinky2position.y/10;\n    this.spheres[5].position.z = this.state.pinky2position.z/10;\n    this.spheres[6].position.x = this.state.ring2position.x/10;\n    this.spheres[6].position.y = this.state.ring2position.y/10;\n    this.spheres[6].position.z = this.state.ring2position.z/10;\n    this.spheres[7].position.x = this.state.birdie2position.x/10;\n    this.spheres[7].position.y = this.state.birdie2position.y/10;\n    this.spheres[7].position.z = this.state.birdie2position.z/10;\n    this.spheres[8].position.x = this.state.index2position.x/10;\n    this.spheres[8].position.y = this.state.index2position.y/10;\n    this.spheres[8].position.z = this.state.index2position.z/10;\n    this.spheres[9].position.x = this.state.thumb2position.x/10;\n    this.spheres[9].position.y = this.state.thumb2position.y/10;\n    this.spheres[9].position.z = this.state.thumb2position.z/10;\n\n    this.animateHands();\n\n    // console.log(this.state.pinky2carpPosition.x);\n    this.renderer.render(this.scene, this.camera);\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  animateHands()\n  {\n    // console.log('Leapviz - animateHands');\n    // console.log(\"Frame event for Leap frame \" + frame.id);\n\n    const frame = this.state.frame;\n\n    if(frame === undefined || frame.hands === undefined)\n      return;\n    if( frame.hands[0] !== undefined)\n    {\n      var leapHand = frame.hands[0],\n        leapFingers = frame.fingers;\n          // handObj, fingersObj;\n      this.setState((prevState, props) => ({\n        hand1position: new THREE.Vector3(leapHand.palmPosition[0],leapHand.palmPosition[1],leapHand.palmPosition[2]),\n        hand1rotation: new THREE.Vector3(leapHand.palmNormal[0], leapHand.palmNormal[1], leapHand.palmNormal[2]),\n        // hand1rotation: new THREE.Vector3(leapHand.palmNormal[2], leapHand.palmNormal[1], -Math.atan2(leapHand.palmNormal[0], leapHand.palmNormal[1]) + Math.PI),\n        pinky1position: new THREE.Vector3(leapFingers[0].tipPosition[0], leapFingers[0].tipPosition[1], leapFingers[0].tipPosition[2]),\n         ring1position: new THREE.Vector3(leapFingers[1].tipPosition[0], leapFingers[1].tipPosition[1], leapFingers[1].tipPosition[2]),\n        birdie1position: new THREE.Vector3(leapFingers[2].tipPosition[0], leapFingers[2].tipPosition[1], leapFingers[2].tipPosition[2]),\n        index1position: new THREE.Vector3(leapFingers[3].tipPosition[0], leapFingers[3].tipPosition[1], leapFingers[3].tipPosition[2]),\n        thumb1position: new THREE.Vector3(leapFingers[4].tipPosition[0], leapFingers[4].tipPosition[1], leapFingers[4].tipPosition[2]),\n      }));\n    }\n    else{\n      this.setState((prevState, props) => ({\n        hand1position: new THREE.Vector3(-1, -1, -1),\n        pinky1position: new THREE.Vector3(-1, -1, -1),\n        ring1position: new THREE.Vector3(-1, -1, -1),\n        birdie1position: new THREE.Vector3(-1, -1, -1),\n        index1position: new THREE.Vector3(-1, -1, -1),\n        thumb1position: new THREE.Vector3(-1, -1, -1)\n      }));\n\n    }\n    if(frame.hands[1] !== undefined)\n    {\n      leapHand = frame.hands[1];\n      leapFingers = frame.pointables;\n      // console.log(leapFingers[5].dipPosition[0]);\n\n      this.setState((prevState, props) => ({\n        hand2position: new THREE.Vector3(leapHand.palmPosition[0],leapHand.palmPosition[1],leapHand.palmPosition[2]),\n        hand2rotation: new THREE.Vector3(leapHand.palmNormal[0], leapHand.palmNormal[1], leapHand.palmNormal[2]),\n        // hand2rotation: new THREE.Vector3(leapHand.palmNormal[2], leapHand.palmNormal[1], -Math.atan2(leapHand.palmNormal[0], leapHand.palmNormal[1]) + Math.PI),\n        pinky2position: new THREE.Vector3( leapFingers[5].tipPosition[0], leapFingers[5].tipPosition[1], leapFingers[5].tipPosition[2]),\n        ring2position: new THREE.Vector3( leapFingers[6].tipPosition[0], leapFingers[6].tipPosition[1], leapFingers[6].tipPosition[2]),\n        birdie2position: new THREE.Vector3(leapFingers[7].tipPosition[0], leapFingers[7].tipPosition[1], leapFingers[7].tipPosition[2]),\n        index2position: new THREE.Vector3( leapFingers[8].tipPosition[0], leapFingers[8].tipPosition[1], leapFingers[8].tipPosition[2]),\n        thumb2position: new THREE.Vector3( leapFingers[9].tipPosition[0], leapFingers[9].tipPosition[1], leapFingers[9].tipPosition[2]),\n      }));\n    }\n    else{\n      this.setState((prevState, props) => ({\n        hand2position: new THREE.Vector3(-1, -1, -1),\n        pinky2position: new THREE.Vector3(-1, -1, -1),\n        ring2position: new THREE.Vector3(-1, -1, -1),\n        birdie2position: new THREE.Vector3(-1, -1, -1),\n        index2position: new THREE.Vector3(-1, -1, -1),\n        thumb2position: new THREE.Vector3(-1, -1, -1)\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{ width: '250px', height: '250px' }}\n        ref={(mount) => { this.mount = mount }}\n      />\n    )\n  }\n}\n\nLeapViz.propTypes = {\n  /**  Leap Motion data frame  */\n  frame: PropTypes.object\n}\n\n// LeapViz.defaultProp = {\n//   /**  Leap motion default data frame */\n//   frame: {\n\n//   }\n// }\n\nexport default withLeapContainer(LeapViz);\n","examples":[{"name":"ExampleLeapViz","description":"","code":"import React from 'react';\nimport LeapViz from 'react-leap-three/LeapViz';\nimport LeapProvider from 'react-leap-three/LeapProvider';\n\nexport default function ExampleLeapViz(){\n  return (\n    <LeapProvider >\n      <LeapViz width={100} height={100} />\n    </LeapProvider>\n  )\n}"}]}]